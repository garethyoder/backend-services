AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: EventBridge Pipe that connects DynamoDB Streams to Lambda with Enrichment

Parameters:
  Stage:
    Type: String
    Default: test

Resources:
  # DynamoDB Table Creation with Stream Enabled
  DynamoDBSampleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: order-table-${Stage}
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: lastUpdatedDate
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: lastUpdatedDate
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      Tags:
        org: cedarmeadowmeats
        env: !Ref Stage

  # Create Customer Lambda Function
  Target:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.cedarmeadowmeats.orderservice.StreamLambdaHandler::handleRequest
      Runtime: java21
      #      SnapStart:
      #        ApplyOn: PublishedVersions
      CodeUri: .
      MemorySize: 1512
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Sub 'order-table-${Stage}'
      Timeout: 60
      Environment:
        Variables:
          org: cedarmeadowmeats
          eng: !Ref Stage
          SPRING_PROFILES_ACTIVE: !Ref Stage
          JAVA_TOOL_OPTIONS: !Sub '-Dspring.profiles.active=${Stage}'
          MAIN_CLASS: com.cedarmeadowmeats.orderservice.OrderServiceApplication
          TABLE_NAME: !Sub 'order-table-${Stage}'
      Tags:
        org: cedarmeadowmeats
        env: !Ref Stage

  # Enrichment log group
  EnrichmentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['stepfunctions', StateMachine]]

  # Enrichment with Step Functions
  EnrichmentStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: workflow/stepfunction.asl.json
      Role: !GetAtt EnrichmentStateMachineRole.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt EnrichmentLogGroup.Arn
        IncludeExecutionData: true
        Level: 'ALL'
        Tags:
          org: cedarmeadowmeats
          env: !Ref Stage

  #Execution Role for StepFunctions
  EnrichmentStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        org: cedarmeadowmeats
        env: !Ref Stage
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogDelivery'
                  - 'logs:GetLogDelivery'
                  - 'logs:UpdateLogDelivery'
                  - 'logs:DeleteLogDelivery'
                  - 'logs:ListLogDeliveries'
                  - 'logs:PutResourcePolicy'
                  - 'logs:DescribeResourcePolicies'
                  - 'logs:DescribeLogGroups'
                Resource: '*'

  # Role + Permissions for Pipes
  PipeRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        org: cedarmeadowmeats
        env: !Ref Stage
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pipes.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SourcePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:DescribeStream"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:ListStreams"
                Resource: !GetAtt DynamoDBSampleTable.StreamArn
        - PolicyName: TargetPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: !GetAtt Target.Arn
        - PolicyName: EnrichmentPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                  - 'states:StartSyncExecution'
                Resource: !GetAtt EnrichmentStateMachine.Arn

  Pipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Tags:
        org: cedarmeadowmeats
        env: !Ref Stage
      Name: ddb-to-lambda-enrichment
      Description: "Pipe to connect DynamoDB Stream to AWS Lambda with filtering and enrichment"
      RoleArn: !GetAtt PipeRole.Arn
      Source: !GetAtt DynamoDBSampleTable.StreamArn
      SourceParameters:
        FilterCriteria:
          Filters:
            - Pattern: '{ "eventName": ["INSERT"], "dynamodb": { "NewImage": { "messageId": { "S": [{ "exists": true }] }, "PK": { "S": [{ "prefix": "Message#" }] }, "SK": { "S": [{ "prefix": "Channel#" }] } } } }'
        DynamoDBStreamParameters:
          StartingPosition: LATEST
          BatchSize: 1
      Enrichment: !GetAtt EnrichmentStateMachine.Arn
      EnrichmentParameters:
        InputTemplate: '{ "PK": <$.dynamodb.NewImage.PK.S>, "SK": <$.dynamodb.NewImage.SK.S> }'
      Target: !GetAtt Target.Arn