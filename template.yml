AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: DynamoDB order-table creation, EventBridge Pipe that streams to Step functions

Mappings:
  EnvVariables:
    test:
      squareAccessKey: "{{resolve:ssm:/create-customer-in-square-test/SQUARE_ACCESS_KEY:1}}"
    prod:
      squareAccessKey: "{{resolve:ssm:/create-customer-in-square-prod/SQUARE_ACCESS_KEY:1}}"

Parameters:
  Environment:
    Type: String
    Default: test
    Description: (Required) Enter test, prod. Default is test.
    AllowedValues:
        - test
        - prod

Resources:
  # DynamoDB Table Creation with Stream Enabled
  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: OrderTable-${Environment}
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: lastUpdatedDate
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: lastUpdatedDate
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: org
          Value: cedarmeadowmeats
        - Key: env
          Value: !Ref Environment

  # Send Email Alert Function
  SendEmailAlertFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'send-email-alert-${Environment}'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Runtime: java21
      #      SnapStart:
      #        ApplyOn: PublishedVersions
      CodeUri: send-email-alert
      MemorySize: 1024
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonSESFullAccess
      Timeout: 60
      Environment:
        Variables:
          org: cedarmeadowmeats
          eng: !Ref Environment
          SPRING_PROFILES_ACTIVE: !Ref Environment
          JAVA_TOOL_OPTIONS: !Sub '-Dspring.profiles.active=${Environment}'
          spring_cloud_function_definition: sendEmailAlert
          MAIN_CLASS: com.cedarmeadowmeats.orderworkflow.sendemailalert.SendEmailAlertApplication
      Tags:
        org: cedarmeadowmeats
        env: !Ref Environment

  # Send Email Confirmation Function
  SendEmailConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'send-email-confirmation-${Environment}'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Runtime: java21
      #      SnapStart:
      #        ApplyOn: PublishedVersions
      CodeUri: send-email-confirmation
      MemorySize: 1024
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonSESFullAccess
      Timeout: 60
      Environment:
        Variables:
          org: cedarmeadowmeats
          eng: !Ref Environment
          SPRING_PROFILES_ACTIVE: !Ref Environment
          JAVA_TOOL_OPTIONS: !Sub '-Dspring.profiles.active=${Environment}'
          MAIN_CLASS: com.cedarmeadowmeats.orderworkflow.sendemailconfirmation.SendEmailConfirmationApplication
      Tags:
        org: cedarmeadowmeats
        env: !Ref Environment

  # Send Email Confirmation Function
  CreateCustomerInSquareFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'create-customer-in-square-${Environment}'
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      Runtime: java21
      #      SnapStart:
      #        ApplyOn: PublishedVersions
      CodeUri: create-customer-in-square
      MemorySize: 1024
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonSESFullAccess
      Timeout: 60
      Environment:
        Variables:
          org: cedarmeadowmeats
          eng: !Ref Environment
          SPRING_PROFILES_ACTIVE: !Ref Environment
          JAVA_TOOL_OPTIONS: !Sub '-Dspring.profiles.active=${Environment}'
          MAIN_CLASS: com.cedarmeadowmeats.orderworkflow.createcustomerinsquare.CreateCustomerInSquareApplication
          SQUARE_ACCESS_KEY: !FindInMap [EnvVariables, !Ref Environment, squareAccessKey]
      Tags:
        org: cedarmeadowmeats
        env: !Ref Environment

  # Enrichment log group
  EnrichmentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['stepfunctions', 'order-workflow-state-machine', !Ref Environment]]

  # OrderWorkflowStateMachine Step Functions
  OrderWorkflowStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      Name: !Sub 'order-workflow-state-machine-${Environment}'
      DefinitionSubstitutions:
        SendEmailAlertFunctionArn: !GetAtt SendEmailAlertFunction.Arn
        SendEmailConfirmationFunctionArn: !GetAtt SendEmailConfirmationFunction.Arn
        CreateCustomerInSquareFunctionArn: !GetAtt CreateCustomerInSquareFunction.Arn
        Environment: !Ref Environment
      DefinitionUri: stepfunction.asl.json
      Role: !GetAtt OrderWorkflowStateMachineRole.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt EnrichmentLogGroup.Arn
        IncludeExecutionData: true
        Level: 'ALL'
      Tags:
        org: cedarmeadowmeats
        env: !Ref Environment

  #Execution Role for StepFunctions
  OrderWorkflowStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: org
          Value: cedarmeadowmeats
        - Key: env
          Value: !Ref Environment
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogDelivery'
                  - 'logs:GetLogDelivery'
                  - 'logs:UpdateLogDelivery'
                  - 'logs:DeleteLogDelivery'
                  - 'logs:ListLogDeliveries'
                  - 'logs:PutResourcePolicy'
                  - 'logs:DescribeResourcePolicies'
                  - 'logs:DescribeLogGroups'
                Resource: '*'
        - PolicyName: LambdaExecute
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - !Sub '${SendEmailAlertFunction.Arn}:*'
                  - !Sub '${SendEmailConfirmationFunction.Arn}:*'
                  - !Sub '${CreateCustomerInSquareFunction.Arn}:*'
        - PolicyName: StepFunctionSESv2Execute
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ses:SendEmail
                Effect: Allow
                Resource: '*'

  # Role + Permissions for Pipes
  PipeRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: org
          Value: cedarmeadowmeats
        - Key: env
          Value: !Ref Environment
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pipes.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SourcePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:DescribeStream"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:ListStreams"
                Resource: !GetAtt OrderTable.StreamArn
        - PolicyName: TargetPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - !GetAtt SendEmailAlertFunction.Arn
                  - !GetAtt SendEmailConfirmationFunction.Arn
                  - !GetAtt CreateCustomerInSquareFunction.Arn
        - PolicyName: EnrichmentPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                  - 'states:StartSyncExecution'
                Resource: !GetAtt OrderWorkflowStateMachine.Arn

  Pipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Tags:
        org: cedarmeadowmeats
        env: !Ref Environment
      Name: !Sub 'order-workflow-pipe-${Environment}'
      Description: "Pipe to connect DynamoDB Stream to AWS Lambda with filtering and enrichment"
      RoleArn: !GetAtt PipeRole.Arn
      Source: !GetAtt OrderTable.StreamArn
      SourceParameters:
        FilterCriteria:
          Filters:
            - Pattern: '{ "eventName": ["INSERT"], "dynamodb": { "NewImage": { "email": { "S": [{ "exists": true }] }, "lastUpdatedDate": { "S": [{ "exists": true }] } } } }'
        DynamoDBStreamParameters:
          StartingPosition: LATEST
          BatchSize: 1
      Target: !Ref OrderWorkflowStateMachine
      TargetParameters:
        StepFunctionStateMachineParameters:
          InvocationType: FIRE_AND_FORGET